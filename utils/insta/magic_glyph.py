import zlib
from pathlib import Path

from minify import minify_snippet, SRC_FILENAME

OUT_GLYPH_FILENAME = 'utils/insta/magic_glyph.txt'


def encode_glyph(snippet: str) -> str:
    compressed: bytes = zlib.compress(snippet.encode())
    return encode_glyph_bytes(compressed)


def save_glyph() -> str:
    minified = minify_snippet(SRC_FILENAME)
    code = encode_glyph(minified)
    Path(OUT_GLYPH_FILENAME).write_text(code)
    return code


def decode_glyph(glyph: str) -> str:
    compressed = bytes(
        ord(glyph[i]) << 4 & 240 | ord(glyph[i + 1]) & 15
        for i in range(1, len(glyph), 2)
    )
    return zlib.decompress(compressed).decode()


def load_glyph():
    glyph = Path(OUT_GLYPH_FILENAME).read_text()
    exec(zlib.decompress(bytes(ord(glyph[i])<<4&240|ord(glyph[i+1])&15 for i in range(1,len(glyph),2))).decode(), globals())


zero_code_points = {
    0x00: 0x0300,
    0x01: 0x0301,
    0x02: 0x0302,
    0x03: 0x0303,
    0x04: 0x0304,
    0x05: 0x0305,
    0x06: 0x0306,
    0x07: 0x0307,
    0x08: 0x0308,
    0x09: 0x0309,
    0x0a: 0x030a,
    0x0b: 0x030b,
    0x0c: 0x030c,
    0x0d: 0x030d,
    0x0e: 0x030e,
    0x0f: 0x030f,
    0x10: 0x0310,
    0x11: 0x0311,
    0x12: 0x0312,
    0x13: 0x0313,
    0x14: 0x0314,
    0x15: 0x0315,
    0x16: 0x0316,
    0x17: 0x0317,
    0x18: 0x0318,
    0x19: 0x0319,
    0x1a: 0x031a,
    0x1b: 0x031b,
    0x1c: 0x031c,
    0x1d: 0x031d,
    0x1e: 0x031e,
    0x1f: 0x031f,
    0x20: 0x0320,
    0x21: 0x0321,
    0x22: 0x0322,
    0x23: 0x0323,
    0x24: 0x0324,
    0x25: 0x0325,
    0x26: 0x0326,
    0x27: 0x0327,
    0x28: 0x0328,
    0x29: 0x0329,
    0x2a: 0x032a,
    0x2b: 0x032b,
    0x2c: 0x032c,
    0x2d: 0x032d,
    0x2e: 0x032e,
    0x2f: 0x032f,
    0x30: 0x0330,
    0x31: 0x0331,
    0x32: 0x0332,
    0x33: 0x0333,
    0x34: 0x0334,
    0x35: 0x0335,
    0x36: 0x0336,
    0x37: 0x0337,
    0x38: 0x0338,
    0x39: 0x0339,
    0x3a: 0x033a,
    0x3b: 0x033b,
    0x3c: 0x033c,
    0x3d: 0x033d,
    0x3e: 0x033e,
    0x3f: 0x033f,
    0x40: 0x0340,
    0x41: 0x0341,
    0x42: 0x0342,
    0x43: 0x0343,
    0x44: 0x0344,
    0x45: 0x0345,
    0x46: 0x0346,
    0x47: 0x0347,
    0x48: 0x0348,
    0x49: 0x0349,
    0x4a: 0x034a,
    0x4b: 0x034b,
    0x4c: 0x034c,
    0x4d: 0x034d,
    0x4e: 0x034e,
    0x4f: 0x034f,
    0x50: 0x0350,
    0x51: 0x0351,
    0x52: 0x0352,
    0x53: 0x0353,
    0x54: 0x0354,
    0x55: 0x0355,
    0x56: 0x0356,
    0x57: 0x0357,
    0x58: 0x0358,
    0x59: 0x0359,
    0x5a: 0x035a,
    0x5b: 0x035b,
    0x5c: 0x035c,
    0x5d: 0x035d,
    0x5e: 0x035e,
    0x5f: 0x035f,
    0x60: 0x0360,
    0x61: 0x0361,
    0x62: 0xe0062,
    0x63: 0x0363,
    0x64: 0x0364,
    0x65: 0x0365,
    0x66: 0x0366,
    0x67: 0x0367,
    0x68: 0x0368,
    0x69: 0x0369,
    0x6a: 0x036a,
    0x6b: 0x036b,
    0x6c: 0x036c,
    0x6d: 0x036d,
    0x6e: 0x036e,
    0x6f: 0x036f,
    0x70: 0xe0070,
    0x71: 0xe0071,
    0x72: 0xe0072,
    0x73: 0xe0073,
    0x74: 0xe0074,
    0x75: 0xe0075,
    0x76: 0xe0076,
    0x77: 0xe0077,
    0x78: 0xe0078,
    0x79: 0xe0079,
    0x7a: 0xe007a,
    0x7b: 0xe007b,
    0x7c: 0xe007c,
    0x7d: 0xe007d,
    0x7e: 0xe007e,
    0x7f: 0xe007f,
    0x80: 0x0f80,
    0x81: 0x0981,
    0x82: 0x0982,
    0x83: 0x0483,
    0x84: 0x0484,
    0x85: 0x0485,
    0x86: 0x0486,
    0x87: 0x0487,
    0x88: 0x0488,
    0x89: 0x0489,
    0x8a: 0x11a8a,
    0x8b: 0x11a8b,
    0x8c: 0x11a8c,
    0x8d: 0x0f8d,
    0x8e: 0x0f8e,
    0x8f: 0x0f8f,
    0x90: 0x0f90,
    0x91: 0x0591,
    0x92: 0x0592,
    0x93: 0x0593,
    0x94: 0x0594,
    0x95: 0x0595,
    0x96: 0x0596,
    0x97: 0x0597,
    0x98: 0x0598,
    0x99: 0x0599,
    0x9a: 0x059a,
    0x9b: 0x059b,
    0x9c: 0x059c,
    0x9d: 0x059d,
    0x9e: 0x059e,
    0x9f: 0x059f,
    0xa0: 0x05a0,
    0xa1: 0x05a1,
    0xa2: 0x05a2,
    0xa3: 0x05a3,
    0xa4: 0x05a4,
    0xa5: 0x05a5,
    0xa6: 0x05a6,
    0xa7: 0x05a7,
    0xa8: 0x05a8,
    0xa9: 0x05a9,
    0xaa: 0x05aa,
    0xab: 0x05ab,
    0xac: 0x05ac,
    0xad: 0x05ad,
    0xae: 0x05ae,
    0xaf: 0x05af,
    0xb0: 0x05b0,
    0xb1: 0x05b1,
    0xb2: 0x05b2,
    0xb3: 0x05b3,
    0xb4: 0x05b4,
    0xb5: 0x05b5,
    0xb6: 0x05b6,
    0xb7: 0x05b7,
    0xb8: 0x05b8,
    0xb9: 0x05b9,
    0xba: 0x05ba,
    0xbb: 0x05bb,
    0xbc: 0x05bc,
    0xbd: 0x05bd,
    0xbe: 0x09be,
    0xbf: 0x05bf,
    0xc0: 0x09c0,
    0xc1: 0x05c1,
    0xc2: 0x05c2,
    0xc3: 0x09c3,
    0xc4: 0x05c4,
    0xc5: 0x05c5,
    0xc6: 0x0cc6,
    0xc7: 0x05c7,
    0xc8: 0x09c8,
    0xc9: 0x0ac9,
    0xca: 0x0dca,
    0xcb: 0x0acb,
    0xcc: 0x0acc,
    0xcd: 0x09cd,
    0xce: 0x17ce,
    0xcf: 0xe01cf,
    0xd0: 0xe01d0,
    0xd1: 0xe01d1,
    0xd2: 0xe01d2,
    0xd3: 0xe01d3,
    0xd4: 0xe01d4,
    0xd5: 0xe01d5,
    0xd6: 0xe01d6,
    0xd7: 0xe01d7,
    0xd8: 0xe01d8,
    0xd9: 0xe01d9,
    0xda: 0xe01da,
    0xdb: 0xe01db,
    0xdc: 0xe01dc,
    0xdd: 0xe01dd,
    0xde: 0xe01de,
    0xdf: 0xe01df,
    0xe0: 0xe01e0,
    0xe1: 0xe01e1,
    0xe2: 0xe01e2,
    0xe3: 0xe01e3,
    0xe4: 0xe01e4,
    0xe5: 0xe01e5,
    0xe6: 0xe01e6,
    0xe7: 0xe01e7,
    0xe8: 0xe01e8,
    0xe9: 0xe01e9,
    0xea: 0xe01ea,
    0xeb: 0xe01eb,
    0xec: 0xe01ec,
    0xed: 0xe01ed,
    0xee: 0xe01ee,
    0xef: 0xe01ef,
    0xf0: 0x1df0,
    0xf1: 0x1df1,
    0xf2: 0x1df2,
    0xf3: 0x1df3,
    0xf4: 0x1df4,
    0xf5: 0x1df5,
    0xf6: 0x1df6,
    0xf7: 0x1df7,
    0xf8: 0x1df8,
    0xf9: 0x1df9,
    0xfa: 0x1dfa,
    0xfb: 0x1dfb,
    0xfc: 0x1dfc,
    0xfd: 0x1dfd,
    0xfe: 0x1dfe,
    0xff: 0xFEFF,
}


def encode_glyph_bytes(nibbles: bytes) -> str:
    buffer: str = 'ðŸ™€'  # U+1F640
    for i in range(0, len(nibbles), 1):
        b = nibbles[i]
        buffer += encode_glyph_byte(b)
    return buffer


def encode_glyph_byte(b: int) -> str:
    # encode each byte as 2 Unicode Combining Diacritical Marks: U+0300 - U+036F [112]
    return chr(0x0300 | (b >> 4)) + chr(0x0300 | (b & 0b1111))

    # if b <= 0x6F:  # <= 111
    #     buffer += chr(0x0300 | b)

    # if b <= 0xef:
    #     return chr(0xe0100 | b)
    # return chr(zero_code_points[b])


if __name__ == '__main__':
    save_glyph()
